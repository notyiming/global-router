# pyproject.toml
#[[tool.pdm.source]]
#name = "Qualcomm"
#url = "https://devpi.qualcomm.com/qct/dev/+simple/"
#verify_ssl = true


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[project]
name = "gr"
description = "Global-Router"
authors = [
    { name = "Yi Ming Tan", email = "ymtan.2062@gmail.com" },
]
maintainers = [
    { name = "Yi Ming Tan", email = "ymtan.2062@gmail.com" },
]
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.11,<3.12"
keywords = [
    "Global-Router", "Python"
]
license = { file = "LICENSE" }
dynamic = ["version"]
dependencies = [
    "rich-click",
    "Flask",
    "pycryptodome",
    "Pyrebase4",
    "python-dotenv",
    "requests",
    "mpld3",
    "fibheap",
    "rich",
]

[tool.pdm]
version = { source = "file", path = "__version__.py" }


[tool.pdm.build]
includes = ["prep"]


[tool.distutils.bdist_wheel]
universal = true

[tool.pdm.dev-dependencies]
lint = [
    "pre-commit",
    "black",
    "isort",
    "flake8",
    "pep8-naming",
    "pydocstyle[toml]",
]
tests = [
    "pytest",
    "pytest-cov",
]
docs = [
    "sphinx",
    "sphinx-book-theme",
    "sphinx-subfigure",
    "sphinxcontrib-plantuml",
    "sphinx-click",
    "sphinx_favicon",
    "sphinx_design",
#    "mkdocs",
#    "mkdocs-material",
#    "mkdocstrings",
#    "mkdocstrings-python",
#    "mkdocs-git-authors-plugin"
]
deploy = [
    "pyinstaller",
]
dev = [
    "prep[lint, tests, docs]",
    "pre-commit",
]
all = { composite = ["lint", "tests", "docs", "deploy"] }

[project.scripts]
gr = "cli:gr"

# pytest.ini
[tool.pytest.ini_options]
testpaths = 'tests'
minversion = '7.2.1'
addopts = [
    "--color=yes",
    "-cache-clear",
    "-ra",
    "--cov=prep",
    "--cov-report=html",
    "--cov-report=term",
    "--no-cov-on-fail",
]
filterwarnings = ["once::Warning", "ignore:::pympler[.*]"]

# Code coverage: Coverage.py
[tool.coverage.run]
parallel = true
branch = true
source = ['prep']


[tool.pydocstyle]
inherit = false
ignore = "D105,D107,D402,D203,D213,D100,D10,D104"
match = ".*\\.py"


[tool.black]
line-length = 88
exclude = "^(docs/.*|tests/.*)$"


[tool.isort]
profile = "black"


[tool.flake8]
ignore = ["E203", "E266", "W503", "B905", "W605"]
max-line-length = 88
max-complexity = 10
#exclude = [".git", "__pycache__", "build", "dist", "docs/conf.py",]
statistics = true
classmethod-decorators = ["classmethod", "validator", "root_validator"]
exclude = [
    # No need to traverse our git directory
    ".git",
    # There's no value in checking cache directories
    "__pycache__",
    # The conf file is mostly autogenerated, ignore it
    "doc/*",
    # This contains our built documentation
    "build/*",
    # This contains builds of flake8 that we don't want to check
    "dist/*",
    # ignore tests from linting checks
    "tests/*",
]


[tool.pdm.scripts]
test = "pytest"
doc = {shell = "cd docs && make html", help = "Generate html documentation"}
pdf = {shell = "cd docs && make latexpdf", help = "Generate pdf user-guide"}
exe.shell = """
    mkdir -p build dist && \
    python3 -m pip install pyinstaller > /dev/null && \
    pyinstaller --clean --log-level=WARN cli.spec > /dev/null && \
    python3 -m pip uninstall -y pyinstaller > /dev/null """
exe.help = "Generate exe using pyinstaller"
bundle = {composite = ["exe", "doc", "pdf"]}
lint = "pre-commit run --all-files"
complete = {call = "cli:gr", help = "GR CLI"}
